name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env files
        run: |
          # Create backend .env files from examples
          cp backend/.env.prod.example backend/.env
          cp backend/.env.prod.example backend/.env.test

          # Create frontend .env file from example
          cp frontend/.env.example frontend/.env
          echo "ALLOWED_HOSTS=localhost" >> frontend/.env

          # Generate unique secret keys for production and test environments
          SECRET_KEY_PROD=$(openssl rand -hex 32)
          SECRET_KEY_TEST=$(openssl rand -hex 32)

          # Set the secret keys in the respective .env files
          sed -i "s/SECRET_KEY=/SECRET_KEY=$SECRET_KEY_PROD/" backend/.env
          sed -i "s/SECRET_KEY=/SECRET_KEY=$SECRET_KEY_TEST/" backend/.env.test

          # Set the environment to "test" in the test-specific .env file
          # This is crucial for enabling test-only API endpoints
          sed -i 's/ENVIRONMENT=production/ENVIRONMENT=test/g' backend/.env.test

      - name: Build services
        run: docker compose build

      - name: Lint Backend
        run: |
          docker compose run --rm backend sh -c "pip install -r requirements-dev.in && ruff check ."

      - name: Lint Frontend
        run: docker compose run --rm frontend npx eslint .

      - name: Run Backend Tests (PostgreSQL)
        run: docker compose -f docker-compose.yml -f docker-compose.test.yml run --rm test

      - name: Run Backend Tests (SQLite)
        run: docker compose -f docker-compose.yml -f docker-compose.test.sqlite.yml run --rm test-sqlite

      - name: Run Frontend Tests
        run: docker compose run --rm frontend npm test

      - name: Run E2E Tests (PostgreSQL)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.e2e.yml up --build --abort-on-container-exit

      - name: Run E2E Tests (SQLite)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.e2e.yml -f docker-compose.e2e.sqlite.yml up --build --abort-on-container-exit

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

name: Create Full Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write

jobs:
  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Make build script executable
        run: chmod +x ./build-and-push.sh

      - name: Build and push Docker images
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
        run: ./build-and-push.sh ${{ env.VERSION }} --push

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.VERSION }}
          body_path: release_notes/${{ env.VERSION }}.md
          draft: false
          prerelease: false

  build-installers:
    name: Build Installer for ${{ matrix.os_name }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            os_name: Windows
            build_script: ./scripts/build-windows.sh
          - os: macos-latest
            os_name: macOS
            build_script: ./scripts/build-macos.sh
          - os: ubuntu-latest
            os_name: Linux
            build_script: ./scripts/build-linux.sh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev
          sudo gem install fpm

      - name: Make build script executable
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.build_script }}

      - name: Run build script
        run: ${{ matrix.build_script }}
        shell: bash

      - name: Upload Windows Asset
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: frontend/dist-electron/ArthSaarthi Setup*.exe
          asset_name: ArthSaarthi-Windows-Setup-${{ github.ref_name }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload macOS Asset
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: frontend/dist-electron/*.dmg
          asset_name: ArthSaarthi-macOS-${{ github.ref_name }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Linux AppImage
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: frontend/dist-electron/*.AppImage
          asset_name: ArthSaarthi-Linux-${{ github.ref_name }}.AppImage
          asset_content_type: application/vnd.appimage

      - name: Upload Linux Deb
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: frontend/dist-electron/*.deb
          asset_name: ArthSaarthi-Linux-${{ github.ref_name }}.deb
          asset_content_type: application/vnd.debian.binary-package

  upload-docs-and-source:
    name: Upload Docs and Source Code
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create source code zip
        run: zip -r source-code-${{ github.ref_name }}.zip . -x ".git/*"

      - name: Upload Source Code Zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./source-code-${{ github.ref_name }}.zip
          asset_name: source-code-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload README
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./README.md
          asset_name: README.md
          asset_content_type: text/markdown

      - name: Upload Installation Guide
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./installation_guide.md
          asset_name: installation_guide.md
          asset_content_type: text/markdown

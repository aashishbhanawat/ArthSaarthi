"""Migrate all PKs and FKs to UUID

Revision ID: d8b5e3d7f2c1
Revises: 469bd61f2d16
Create Date: 2025-08-04 05:41:16.123456

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd8b5e3d7f2c1'
down_revision: Union[str, None] = '469bd61f2d16'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    if bind.dialect.name != 'postgresql':
        print("Skipping UUID migration for non-postgresql database")
        return

    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    # Drop foreign key constraints before altering columns
    op.drop_constraint('portfolios_user_id_fkey', 'portfolios', type_='foreignkey')
    op.drop_constraint('transactions_asset_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('transactions_portfolio_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('transactions_user_id_fkey', 'transactions', type_='foreignkey')
    # This FK exists and must be dropped to allow the users table to be altered.
    op.drop_constraint('import_sessions_user_id_fkey', 'import_sessions', type_='foreignkey')
    # NOTE: The portfolio_id FK does not exist on a fresh DB, so we do not drop it.

    # Drop old integer sequence defaults before changing column type
    op.execute('ALTER TABLE users ALTER COLUMN id DROP DEFAULT;')
    op.execute('ALTER TABLE assets ALTER COLUMN id DROP DEFAULT;')
    op.execute('ALTER TABLE portfolios ALTER COLUMN id DROP DEFAULT;')
    op.execute('ALTER TABLE transactions ALTER COLUMN id DROP DEFAULT;')

    # Alter primary key columns
    op.alter_column('assets', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               server_default=sa.text('uuid_generate_v4()'),
               postgresql_using='uuid_generate_v5(uuid_ns_url(), id::text)')

    op.alter_column('users', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               server_default=sa.text('uuid_generate_v4()'),
               postgresql_using='uuid_generate_v5(uuid_ns_url(), id::text)')

    op.alter_column('portfolios', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               server_default=sa.text('uuid_generate_v4()'),
               postgresql_using='uuid_generate_v5(uuid_ns_url(), id::text)')

    op.alter_column('transactions', 'id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               server_default=sa.text('uuid_generate_v4()'),
               postgresql_using='uuid_generate_v5(uuid_ns_url(), id::text)')

    # Alter foreign key columns
    op.alter_column('portfolios', 'user_id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='uuid_generate_v5(uuid_ns_url(), user_id::text)')

    op.alter_column('transactions', 'asset_id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='uuid_generate_v5(uuid_ns_url(), asset_id::text)')

    op.alter_column('transactions', 'portfolio_id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='uuid_generate_v5(uuid_ns_url(), portfolio_id::text)')

    op.alter_column('transactions', 'user_id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='uuid_generate_v5(uuid_ns_url(), user_id::text)')

    # The portfolio_id column was missing from the initial migration that created this table.
    # We add it here to correct the schema history.
    op.add_column('import_sessions', sa.Column('portfolio_id', postgresql.UUID(as_uuid=True), nullable=False))
    op.alter_column('import_sessions', 'user_id',
               existing_type=sa.INTEGER(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='uuid_generate_v5(uuid_ns_url(), user_id::text)')

    # Recreate foreign key constraints
    op.create_foreign_key(None, 'portfolios', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'portfolios', ['portfolio_id'], ['id'])
    op.create_foreign_key(None, 'transactions', 'assets', ['asset_id'], ['id'])
    op.create_foreign_key(None, 'import_sessions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'import_sessions', 'portfolios', ['portfolio_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Downgrading from UUID to Integer can be lossy and is generally not recommended.
    # This is a simplified downgrade path for development purposes.
    op.drop_constraint('transactions_asset_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('transactions_portfolio_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('transactions_user_id_fkey', 'transactions', type_='foreignkey')
    op.drop_constraint('portfolios_user_id_fkey', 'portfolios', type_='foreignkey')
    op.drop_constraint('import_sessions_user_id_fkey', 'import_sessions', type_='foreignkey')
    op.drop_constraint('import_sessions_portfolio_id_fkey', 'import_sessions', type_='foreignkey')

    # This is a placeholder for a more complex downgrade logic.
    # In a real-world scenario, you would need a strategy to map UUIDs back to integers.
    pass
    # ### end Alembic commands ###
version: '3.8'

networks:
  pms_network:
    driver: bridge

volumes:
  postgres_data:

services:
  db:
    image: postgres:13
    container_name: pms-db-prod
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pms_network

  redis:
    image: redis:alpine
    container_name: pms-redis-prod
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pms_network

  backend:
    image: ${DOCKER_REGISTRY:-aashishbhanawat}/arthsaarthi-backend:${APP_VERSION:-latest}
    pull_policy: if_not_present
    container_name: pms-backend-prod
    restart: always    
    env_file:
      - ./backend/.env.prod
    environment:
      - PYTHONPATH=/app
    networks:
      - pms_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    image: ${DOCKER_REGISTRY:-aashishbhanawat}/arthsaarthi-frontend:${APP_VERSION:-latest}
    pull_policy: if_not_present
    container_name: pms-frontend-prod
    restart: always
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - pms_network
    depends_on:
      - backend
version: '3.8'

services:
  db:
    image: postgres:13
    container_name: pms-db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pms_network

  test:
    build: ./backend
    container_name: pms-test
    command: ["pytest", "-v"]
    env_file:
      - ./backend/.env.test
    volumes:
      - ./backend:/app
    networks:
      - pms_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  backend:
    build: ./backend
    container_name: pms-backend
    restart: unless-stopped
    command: /app/entrypoint.sh
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pms_network

  frontend:
    build: ./frontend
    container_name: pms-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - pms_network

  redis:
    image: redis:alpine
    container_name: pms-redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pms_network

volumes:
  postgres_data:

networks:
  pms_network:
    driver: bridge
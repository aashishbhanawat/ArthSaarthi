import { test, expect, Page } from '@playwright/test';

const standardUser = {
  name: 'PPF User E2E',
  email: `ppf.e2e.${Date.now()}@example.com`,
  password: 'Password123!',
};

const adminUser = {
    email: process.env.FIRST_SUPERUSER_EMAIL || 'admin@example.com',
    password: process.env.FIRST_SUPERUSER_PASSWORD || 'AdminPass123!',
};

async function login(page: Page, email = adminUser.email, password = adminUser.password) {
    await page.goto('/');
    await page.getByLabel('Email address').fill(email);
    await page.getByLabel('Password').fill(password);
    await page.getByRole('button', { name: 'Sign in' }).click();
    await page.waitForURL('**/dashboard');
    await expect(page.getByRole('heading', { name: 'Dashboard' })).toBeVisible();
}

async function openTransactionModal(page: Page) {
    await page.getByRole('button', { name: 'Add Transaction' }).click();
    await expect(page.getByRole('heading', { name: 'Add Transaction' })).toBeVisible();
}

test.describe.serial('PPF Account Tracking', () => {
  test.beforeAll(async ({ request }) => {
    const adminLoginResponse = await request.post('/api/v1/auth/login', {
      form: { username: adminUser.email, password: adminUser.password },
    });
    expect(adminLoginResponse.ok()).toBeTruthy();
    const { access_token } = await adminLoginResponse.json();
    const adminAuthHeaders = { Authorization: `Bearer ${access_token}` };

    const standardUserCreateResponse = await request.post('/api/v1/users/', {
      headers: adminAuthHeaders,
      data: { ...standardUser, is_admin: false },
    });
    expect(standardUserCreateResponse.ok()).toBeTruthy();
  });

  test.beforeEach(async ({ page }) => {
    await login(page, standardUser.email, standardUser.password);
  });

  test('should create a PPF account with first contribution and then add a second contribution', async ({ page }) => {
    // 1. Create a new portfolio
    const portfolioName = `PPF Portfolio ${Date.now()}`;
    await page.getByRole('link', { name: 'Portfolios' }).click();
    await page.getByRole('button', { name: 'Create New Portfolio' }).click();
    await page.getByLabel('Name').fill(portfolioName);
    await page.getByRole('button', { name: 'Create', exact: true }).click();
    await expect(page.getByRole('heading', { name: portfolioName })).toBeVisible();

    // 2. Open transaction modal and create PPF account + first contribution
    await openTransactionModal(page);
    await page.selectOption('select#asset_type', 'PPF Account');

    // Verify State 1: Create Account form is visible
    await expect(page.getByRole('heading', { name: 'Create Your PPF Account' })).toBeVisible();
    await page.fill('input#institutionName', 'E2E PPF Bank');
    await page.fill('input#openingDate', '2022-04-15');
    await page.fill('input#contributionAmount', '50000');
    await page.fill('input#contributionDate', '2022-05-20');
    await page.getByRole('button', { name: 'Save' }).click();
    await expect(page.locator('div[role="dialog"]')).not.toBeVisible();

    // 3. Verify holding is created
    await page.reload();
    await page.waitForLoadState('networkidle');
    const ppfRow = page.locator('tr', { hasText: 'E2E PPF Bank' });
    await expect(ppfRow).toBeVisible();

    // 4. Open transaction modal again and add a second contribution
    await openTransactionModal(page);
    await page.selectOption('select#asset_type', 'PPF Account');

    // Verify State 2: Add Contribution form is visible
    await expect(page.getByRole('heading', { name: 'Existing PPF Account' })).toBeVisible();
    await expect(page.locator('div', { hasText: 'Institution: E2E PPF Bank' })).toBeVisible();
    await page.fill('input#newContributionAmount', '25000');
    await page.fill('input#newContributionDate', '2023-01-10');
    await page.getByRole('button', { name: 'Save' }).click();
    await expect(page.locator('div[role="dialog"]')).not.toBeVisible();

    // 5. Verify holding value has updated
    await page.reload();
    await page.waitForLoadState('networkidle');
    const totalInvestment = 75000;
    const currentBalanceCell = ppfRow.locator('td').nth(4);
    const balanceText = await currentBalanceCell.innerText();
    const balanceValue = parseFloat(balanceText.replace(/[â‚¹,]/g, ''));
    expect(balanceValue).toBeGreaterThan(totalInvestment);

    // 6. Open Passbook Modal and verify content
    await ppfRow.click();
    const passbookModal = page.locator('div[role="dialog"]');
    await expect(passbookModal.getByRole('heading', { name: /PPF Account: E2E PPF Bank/ })).toBeVisible();
    await expect(passbookModal.locator('tr', { hasText: 'Contribution' })).toHaveCount(2);
    await expect(passbookModal.locator('tr', { hasText: 'Interest Credit' })).toBeVisible();
  });
});
